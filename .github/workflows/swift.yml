
L'erreur invalid custom path 'App/SourceFiles' for target 'Showdown-Master-Referee' indique que le chemin personnalisé spécifié pour les fichiers sources de la cible Showdown-Master-Referee n'est pas valide ou n'existe pas.

Voici les étapes à suivre pour corriger ce problème :

1. Vérifier la structure du projet
Assurez-vous que votre projet respecte la structure suivante si vous utilisez des chemins personnalisés :

lua
Copier
Modifier
/
|-- App/
|   |-- SourceFiles/   (doit contenir vos fichiers source .swift pour la cible Showdown-Master-Referee)
|-- Tests/
    |-- Showdown-Master-RefereeTest/   (doit contenir vos fichiers de test)
Si ce n'est pas le cas, adaptez les chemins dans le fichier Package.swift pour correspondre à la véritable structure.

2. Modifier Package.swift si nécessaire
Si la structure ne correspond pas, mettez à jour les chemins pour qu'ils pointent aux bons répertoires. Voici un exemple avec des chemins standards (sans "App/") :

swift
Copier
Modifier
// swift-tools-version:5.9
import PackageDescription

let package = Package(
    name: "Showdown-Master-Referee",
    platforms: [
        .iOS(.v17)
    ],
    products: [
        .library(
            name: "Showdown-Master-Referee",
            targets: ["Showdown-Master-Referee"]
        ),
    ],
    dependencies: [
        .package(url: "https://github.com/Alamofire/Alamofire.git", from: "5.10.2"),
    ],
    targets: [
        .target(
            name: "Showdown-Master-Referee",
            dependencies: ["Alamofire"],
            path: "Sources/Showdown-Master-Referee" // Mettez ici le chemin exact vers vos fichiers source
        ),
        .testTarget(
            name: "Showdown-Master-RefereeTest",
            dependencies: ["Showdown-Master-Referee"],
            path: "Tests/Showdown-Master-RefereeTest" // Mettez ici le chemin exact vers vos fichiers de test
        ),
    ]
)
3. Créer les répertoires nécessaires
Si les répertoires spécifiés n'existent pas, vous devez les créer et déplacer vos fichiers Swift au bon endroit.

Par exemple :

Si vous spécifiez path: "App/SourceFiles", assurez-vous qu'il existe un dossier App/SourceFiles contenant vos fichiers source .swift.
Faites de même pour les tests dans App/Tests ou tout autre chemin configuré.
4. Tester localement
Avant de relancer votre workflow GitHub Actions, testez localement en exécutant les commandes suivantes :

bash
Copier
Modifier
swift package clean
swift package resolve
swift build
swift test
Ces commandes vous indiqueront si les chemins sont correctement configurés.

5. Mise à jour du workflow GitHub Actions
Assurez-vous que votre workflow utilise les bonnes commandes et que tous les fichiers sont inclus dans le dépôt. Par exemple :

yaml
Copier
Modifier
name: CI-iOS

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build-and-test:
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4

    - name: Set up Xcode
      run: sudo xcode-select -switch /Applications/Xcode_15.0.app

    - name: Check Swift version
      run: swift --version

    - name: Resolve dependencies
      run: swift package resolve

    - name: Build and Test
      run: swift test

    - name: Build and Test
      run: |
        xcodebuild clean build test \
          -workspace .swiftpm/xcode/package.xcworkspace \
          -scheme "CI_iOS" \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO \
          -sdk iphonesimulator \
          -destination "platform=iOS Simulator,name=iPhone 16 Pro,OS=18.2" \
          ONLY_ACTIVE_ARCH=YES
